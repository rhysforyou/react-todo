{"version":3,"sources":["containers/TodoInput.tsx","actions/visibilityFilter.ts","actions/todos.ts","components/TodoItem.tsx","components/TodoList.tsx","containers/VisibleTodoList.ts","components/FilterBar.tsx","containers/FilterBarContainer.tsx","components/AppFooter.tsx","components/AppHeader.tsx","containers/App.tsx","reducers/todos.ts","reducers/todoApp.ts","reducers/visibilityFilter.ts","index.tsx"],"names":["Filter","TodoInput","state","value","handleChange","event","setState","target","handleSubmit","preventDefault","props","dispatch","type","title","canSubmit","this","className","onSubmit","placeholder","onChange","disabled","Component","connect","completionClass","completed","TodoItem","onClick","checked","e","TodoList","items","onClickItem","map","item","key","id","renderItems","getVisibleItems","todos","filter","Completed","t","Incomplete","VisibleTodoList","visibilityFilter","toggleItemCompleted","FilterBar","filters","activeFilter","onClickFilter","active","index","renderButtons","FilterBarContainer","All","setFilter","AppFooter","role","aria-label","href","AppHeader","App","lastIndex","reducer","combineReducers","action","slice","push","toString","todoIndex","findIndex","todo","store","createStore","todoApp","ReactDOM","render","document","getElementById"],"mappings":"8aAeO,ICbKA,EDaCC,EAAb,2MACEC,MAAwB,CACtBC,MAAO,IAFX,EAIEC,aAAe,SAACC,GACd,EAAKC,SAAS,CAAEH,MAAOE,EAAME,OAAOJ,SALxC,EAOEK,aAAe,SAACH,GACdA,EAAMI,iBACN,EAAKC,MAAMC,SEhBN,CAAEC,KAAM,WAAYC,MFgBG,EAAKX,MAAMC,QACvC,EAAKG,SAAS,CAAEH,MAAO,MAV3B,wEAaI,IAAMW,EAAiC,KAArBC,KAAKb,MAAMC,MAC7B,OACE,0BAAMa,UAAU,aAAaC,SAAUF,KAAKP,cAC1C,2BACEI,KAAK,OACLM,YAAY,kBACZf,MAAOY,KAAKb,MAAMC,MAClBgB,SAAUJ,KAAKX,eAEjB,4BAAQQ,KAAK,SAASQ,UAAWN,GAAjC,kBAtBR,GAA+BO,aA8BhBC,gBAAUrB,I,SC3CbD,K,UAAAA,E,sBAAAA,E,yBAAAA,M,qBECNuB,EAAkB,SAACC,GAAD,OACtBA,EAAY,YAAc,cAuBbC,EAfE,SAAC,GAAD,IAAGZ,EAAH,EAAGA,MAAOW,EAAV,EAAUA,UAAWE,EAArB,EAAqBA,QAArB,OACf,wBAAIV,UAAS,yBAAoBO,EAAgBC,KAC/C,+BACE,2BACEZ,KAAK,WACLe,QAASH,EACTL,SAAU,SAAAS,GACRF,OAGHb,KCMQgB,EAJE,SAAC,GAAD,IAAGC,EAAH,EAAGA,MAAOC,EAAV,EAAUA,YAAV,OACf,wBAAIf,UAAU,aAfI,SAClBc,EACAC,GAEA,OAAOD,EAAME,IAAI,SAAAC,GAAI,OACnB,kBAAC,EAAD,CACEpB,MAAOoB,EAAKpB,MACZW,UAAWS,EAAKT,UAChBU,IAAKD,EAAKE,GACVT,QAAS,kBAAMK,EAAYE,EAAKE,SAMTC,CAAYN,EAAOC,KChB1CM,EAAkB,SAACC,EAAmBC,GAC1C,OAAQA,GACN,KAAKvC,EAAOwC,UACV,OAAOF,EAAMC,OAAO,SAAAE,GAAC,OAAIA,EAAEjB,YAC7B,KAAKxB,EAAO0C,WACV,OAAOJ,EAAMC,OAAO,SAAAE,GAAC,OAAKA,EAAEjB,YAC9B,QACE,OAAOc,IAiCEK,EALSrB,YApBO,SAACpB,GAC9B,MAAO,CACL4B,MAAOO,EAAgBnC,EAAMoC,MAAOpC,EAAM0C,oBAQZ,SAChCjC,GAEA,MAAO,CACLoB,YAAa,SAAAI,GACXxB,EHvBC,SAA6BwB,GAClC,MAAO,CAAEvB,KAAM,wBAAyBuB,MGsB3BU,CAAoBV,OAKXb,CAGtBO,GCZaiB,G,MATG,SAAC,GAAD,IAChBC,EADgB,EAChBA,QACAC,EAFgB,EAEhBA,aACAC,EAHgB,EAGhBA,cAHgB,OAKhB,yBAAKjC,UAAU,mBA3BK,SACpB+B,EACAG,EACAxB,GAEA,OAAOqB,EAAQf,IAAI,SAACO,EAAQY,GAAT,OACjB,4BACEjB,IAAKiB,EACLzB,QAAS,SAAAE,GAAC,OAAIF,EAAQa,IACtBvB,UAAWuB,IAAWW,EAAS,SAAW,YAEzCX,KAiBFa,CAAcL,EAASC,EAAcC,MCM3BI,EALY/B,YArBI,SAACpB,GAC9B,MAAO,CACL8C,aAAc9C,EAAM0C,iBACpBG,QAAS,CAAC/C,EAAOsD,IAAKtD,EAAOwC,UAAWxC,EAAO0C,cAQjB,SAChC/B,GAEA,MAAO,CACLsC,cAAe,SAACV,GACd5B,ENfC,SAAmB4B,GACxB,MAAO,CAAE3B,KAAM,aAAc2B,UMchBgB,CAAUhB,OAKEjB,CAGzBwB,GCjBaU,G,MAhBG,kBAChB,4BAAQxC,UAAU,cAChB,2EAC6C,IAC3C,0BAAMyC,KAAK,MAAMC,aAAW,SAA5B,gBAEQ,IAJV,MAKK,uBAAGC,KAAK,kCAAR,gBAEL,6BACA,8BACE,uBAAGA,KAAK,4CAAR,sBCHSC,G,MARG,kBAChB,4BAAQ5C,UAAU,cAChB,4BACE,0BAAMA,UAAU,aAAhB,SADF,kBCeW6C,EAZH,WACV,OACE,yBAAK7C,UAAU,OACb,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,Q,4OCLN,IAAI8C,EAAY,ECAhB,IAKeC,EALyBC,YAAgB,CACtD1B,MDCa,WAGA,IAFbpC,EAEY,uDAFQ,GACpB+D,EACY,uCACR3B,EAAQpC,EAAMgE,QAClB,OAAQD,EAAOrD,MACb,IAAK,WAMH,OALA0B,EAAM6B,KAAK,CACTtD,MAAOoD,EAAOpD,MACdW,WAAW,EACXW,IAAK2B,KAAaM,aAEb9B,EACT,IAAK,wBACH,IAAI+B,EAAY/B,EAAMgC,UAAU,SAAAC,GAAI,OAAIA,EAAKpC,KAAO8B,EAAO9B,KAC3D,IAAmB,IAAfkC,EAAkB,CACpB,IAAIE,EAAOjC,EAAM+B,GACjB/B,EAAM+B,G,qVAAN,IAAwBE,EAAxB,CAA8B/C,WAAY+C,EAAK/C,YAEjD,OAAOc,EAET,QACE,OAAOA,ICtBXM,iBCPa,WAGW,IAFxB1C,EAEuB,uDAFQF,EAAOsD,IACtCW,EACuB,uCACvB,OAAQA,EAAOrD,MACb,IAAK,aACH,OAAOqD,EAAO1B,OAChB,QACE,OAAOrC,MCJTsE,EAA8BC,YAAYC,GAE9CC,IAASC,OACP,kBAAC,IAAD,CAAUJ,MAAOA,GACf,kBAAC,EAAD,OAEFK,SAASC,eAAe,W","file":"static/js/main.6f729154.chunk.js","sourcesContent":["import './TodoInput.css'\nimport React, { Component, ChangeEvent, FormEvent } from 'react'\nimport { connect } from 'react-redux'\nimport { addItem } from '../actions/todos'\nimport { Dispatch } from 'redux'\nimport { Action } from '../actions'\n\ninterface TodoInputProps {\n  dispatch: Dispatch<Action>\n}\n\ninterface TodoInputState {\n  value: string\n}\n\nexport class TodoInput extends Component<TodoInputProps, TodoInputState> {\n  state: TodoInputState = {\n    value: ''\n  }\n  handleChange = (event: ChangeEvent<HTMLInputElement>) => {\n    this.setState({ value: event.target.value })\n  }\n  handleSubmit = (event: FormEvent<HTMLFormElement>) => {\n    event.preventDefault()\n    this.props.dispatch(addItem(this.state.value))\n    this.setState({ value: '' })\n  }\n  render() {\n    const canSubmit = this.state.value !== ''\n    return (\n      <form className=\"todo-input\" onSubmit={this.handleSubmit}>\n        <input\n          type=\"text\"\n          placeholder=\"Add a new to-do\"\n          value={this.state.value}\n          onChange={this.handleChange}\n        />\n        <button type=\"submit\" disabled={!canSubmit}>\n          Add To-Do\n        </button>\n      </form>\n    )\n  }\n}\n\nexport default connect()(TodoInput)\n","import { Action } from 'redux'\n\nexport enum Filter {\n  All = 'ALL',\n  Completed = 'COMPLETED',\n  Incomplete = 'INCOMPLETE'\n}\n\nexport interface SetFilterAction extends Action {\n  type: 'SET_FILTER'\n  filter: Filter\n}\n\nexport function setFilter(filter: Filter): SetFilterAction {\n  return { type: 'SET_FILTER', filter }\n}\n","import { Action } from 'redux'\n\nexport interface AddItemAction extends Action {\n  type: 'ADD_ITEM'\n  title: string\n}\n\nexport function addItem(title: string): AddItemAction {\n  return { type: 'ADD_ITEM', title }\n}\n\nexport interface ToggleItemCompletedAction extends Action {\n  type: 'TOGGLE_ITEM_COMPLETED'\n  id: string\n}\n\nexport function toggleItemCompleted(id: string): ToggleItemCompletedAction {\n  return { type: 'TOGGLE_ITEM_COMPLETED', id }\n}\n","import './TodoItem.css'\nimport React from 'react'\n\nconst completionClass = (completed: boolean) =>\n  completed ? 'completed' : 'incomplete'\n\ninterface TodoItemProps {\n  title: string\n  completed: boolean\n  onClick: () => void\n}\n\nconst TodoItem = ({ title, completed, onClick }: TodoItemProps) => (\n  <li className={`todo-list-item ${completionClass(completed)}`}>\n    <label>\n      <input\n        type=\"checkbox\"\n        checked={completed}\n        onChange={e => {\n          onClick()\n        }}\n      />\n      {title}\n    </label>\n  </li>\n)\n\nexport default TodoItem\n","import React from 'react'\nimport './TodoList.css'\nimport TodoItem from './TodoItem'\nimport { ToDoItem as ToDoItemType } from '../reducers/todos'\n\ninterface ToDoListProps {\n  items: ToDoItemType[]\n  onClickItem: (itemID: string) => void\n}\n\nconst renderItems = (\n  items: ToDoItemType[],\n  onClickItem: (itemID: string) => void\n) => {\n  return items.map(item => (\n    <TodoItem\n      title={item.title}\n      completed={item.completed}\n      key={item.id}\n      onClick={() => onClickItem(item.id)}\n    />\n  ))\n}\n\nconst TodoList = ({ items, onClickItem }: ToDoListProps) => (\n  <ul className=\"todo-list\">{renderItems(items, onClickItem)}</ul>\n)\n\nexport default TodoList\n","import { connect } from 'react-redux'\nimport { toggleItemCompleted } from '../actions/todos'\nimport { Filter } from '../actions/visibilityFilter'\nimport TodoList from '../components/TodoList'\nimport { ToDoItem } from '../reducers/todos'\nimport { State } from '../reducers/todoApp'\nimport { Dispatch } from 'react'\nimport { Action } from '../actions'\n\nconst getVisibleItems = (todos: ToDoItem[], filter: Filter): ToDoItem[] => {\n  switch (filter) {\n    case Filter.Completed:\n      return todos.filter(t => t.completed)\n    case Filter.Incomplete:\n      return todos.filter(t => !t.completed)\n    default:\n      return todos\n  }\n}\n\ninterface StateProps {\n  items: ToDoItem[]\n}\n\nexport const mapStateToProps = (state: State): StateProps => {\n  return {\n    items: getVisibleItems(state.todos, state.visibilityFilter)\n  }\n}\n\ninterface DispatchProps {\n  onClickItem: (id: string) => void\n}\n\nexport const mapDispatchToProps = (\n  dispatch: Dispatch<Action>\n): DispatchProps => {\n  return {\n    onClickItem: id => {\n      dispatch(toggleItemCompleted(id))\n    }\n  }\n}\n\nconst VisibleTodoList = connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(TodoList)\n\nexport default VisibleTodoList\n","import './FilterBar.css'\nimport React from 'react'\nimport { Filter } from '../actions/visibilityFilter'\n\nconst renderButtons = (\n  filters: Filter[],\n  active: string,\n  onClick: (filter: Filter) => void\n) => {\n  return filters.map((filter, index) => (\n    <button\n      key={index}\n      onClick={e => onClick(filter)}\n      className={filter === active ? 'active' : 'inactive'}\n    >\n      {filter}\n    </button>\n  ))\n}\n\ninterface FilterBarProps {\n  filters: Filter[]\n  activeFilter: string\n  onClickFilter: (filter: Filter) => void\n}\n\nconst FilterBar = ({\n  filters,\n  activeFilter,\n  onClickFilter\n}: FilterBarProps) => (\n  <div className=\"todo-filter-bar\">\n    {renderButtons(filters, activeFilter, onClickFilter)}\n  </div>\n)\nexport default FilterBar\n","import { connect } from 'react-redux'\nimport { setFilter, Filter } from '../actions/visibilityFilter'\nimport FilterBar from '../components/FilterBar'\nimport { State } from '../reducers/todoApp'\nimport { Dispatch } from 'react'\nimport { Action } from '../actions'\n\ninterface StateProps {\n  activeFilter: Filter\n  filters: Filter[]\n}\n\nexport const mapStateToProps = (state: State): StateProps => {\n  return {\n    activeFilter: state.visibilityFilter,\n    filters: [Filter.All, Filter.Completed, Filter.Incomplete]\n  }\n}\n\ninterface DispatchProps {\n  onClickFilter: (filter: Filter) => void\n}\n\nexport const mapDispatchToProps = (\n  dispatch: Dispatch<Action>\n): DispatchProps => {\n  return {\n    onClickFilter: (filter: Filter) => {\n      dispatch(setFilter(filter))\n    }\n  }\n}\n\nconst FilterBarContainer = connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(FilterBar)\n\nexport default FilterBarContainer\n","import './AppFooter.css'\nimport React from 'react'\n\nconst AppFooter = () => (\n  <footer className=\"app-footer\">\n    <span>\n      Made with a little knowledge, and a lot of{' '}\n      <span role=\"img\" aria-label=\"heart\">\n        ❤️\n      </span>{' '}\n      by <a href=\"https://twitter.com/rhysforyou\">Rhys Powell</a>\n    </span>\n    <br />\n    <span>\n      <a href=\"https://github.com/rhysforyou/react-todo\">View on GitHub</a>\n    </span>\n  </footer>\n)\n\nexport default AppFooter\n","import './AppHeader.css'\nimport React from 'react'\n\nconst AppHeader = () => (\n  <header className=\"app-header\">\n    <h1>\n      <span className=\"highlight\">React</span> To Do List\n    </h1>\n  </header>\n)\n\nexport default AppHeader\n","import React from 'react'\nimport './App.css'\nimport TodoInput from './TodoInput'\nimport VisibleTodoList from './VisibleTodoList'\nimport FilterBarContainer from './FilterBarContainer'\nimport AppFooter from '../components/AppFooter'\nimport AppHeader from '../components/AppHeader'\n\nconst App = () => {\n  return (\n    <div className=\"app\">\n      <AppHeader />\n      <TodoInput />\n      <VisibleTodoList />\n      <FilterBarContainer />\n      <AppFooter />\n    </div>\n  )\n}\n\nexport default App\n","import { Action } from '../actions'\n\nexport interface ToDoItem {\n  title: string\n  completed: boolean\n  id: string\n}\n\nexport type TodosState = ToDoItem[]\n\nlet lastIndex = 0\n\nexport default function todos(\n  state: TodosState = [],\n  action: Action\n): TodosState {\n  let todos = state.slice()\n  switch (action.type) {\n    case 'ADD_ITEM':\n      todos.push({\n        title: action.title,\n        completed: false,\n        id: (lastIndex++).toString()\n      })\n      return todos\n    case 'TOGGLE_ITEM_COMPLETED': {\n      let todoIndex = todos.findIndex(todo => todo.id === action.id)\n      if (todoIndex !== -1) {\n        let todo = todos[todoIndex]\n        todos[todoIndex] = { ...todo, completed: !todo.completed }\n      }\n      return todos\n    }\n    default:\n      return todos\n  }\n}\n","import todos, { TodosState } from './todos'\nimport visibilityFilter, { VisibilityFilterState } from './visibilityFilter'\nimport { combineReducers, Reducer } from 'redux'\nimport { Action } from '../actions'\n\nexport interface State {\n  todos: TodosState\n  visibilityFilter: VisibilityFilterState\n}\n\nconst reducer: Reducer<State, Action> = combineReducers({\n  todos,\n  visibilityFilter\n})\n\nexport default reducer\n","import { Filter } from '../actions/visibilityFilter'\nimport { Action } from '../actions'\n\nexport type VisibilityFilterState = Filter\n\nexport default function visibilityFilter(\n  state: VisibilityFilterState = Filter.All,\n  action: Action\n): VisibilityFilterState {\n  switch (action.type) {\n    case 'SET_FILTER':\n      return action.filter\n    default:\n      return state\n  }\n}\n","import React from 'react'\nimport { Provider } from 'react-redux'\nimport { createStore, Store } from 'redux'\nimport ReactDOM from 'react-dom'\nimport App from './containers/App'\nimport './index.css'\nimport todoApp, { State } from './reducers/todoApp'\nimport { Action } from './actions'\n\nlet store: Store<State, Action> = createStore(todoApp)\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n)\n"],"sourceRoot":""}